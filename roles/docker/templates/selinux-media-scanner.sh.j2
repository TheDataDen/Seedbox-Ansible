#!/bin/bash
# Dynamic SELinux Media Directory Scanner
# Automatically blocks all /shares directories except allowed media ones
# Generated by Ansible

# Configuration
DATA_DIR="/shares"
LOG_FILE="{{ docker_scanner_log_file }}"

# Define allowed media directories
ALLOWED_DIRS=(
{% for share in shares %}
    "{{ share }}"
{% endfor %}
)

# SELinux contexts
ALLOWED_CONTEXT="container_file_t"    # Accessible to containers
BLOCKED_CONTEXT="admin_home_t"        # Blocked from containers

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Function to check if directory is in allowed list
is_allowed() {
    local dir="$1"
    for allowed in "${ALLOWED_DIRS[@]}"; do
        if [[ "$dir" == "$allowed" ]]; then
            return 0
        fi
    done
    return 1
}

# Function to get current SELinux context
get_current_context() {
    local dir_path="$1"
    ls -ldZ "$dir_path" 2>/dev/null | awk '{print $4}' | cut -d: -f3
}

# Function to set SELinux context
set_selinux_context() {
    local dir_path="$1"
    local target_context="$2"
    
    # Set the file context rule
    if semanage fcontext -a -t "$target_context" "$dir_path(/.*)?" 2>/dev/null; then
        log_message "Added context rule for $dir_path"
    else
        # Context rule might already exist, try to modify it
        semanage fcontext -m -t "$target_context" "$dir_path(/.*)?" 2>/dev/null || true
    fi
    
    # Apply the context to existing files
    if restorecon -R "$dir_path" 2>/dev/null; then
        log_message "Applied context to $dir_path"
        return 0
    else
        log_message "WARNING: Failed to apply context to $dir_path"
        return 1
    fi
}

# Main scanning function
scan_and_label() {
    log_message "Starting SELinux media directory scan..."
    
    # Check if SELinux is enabled
    if ! command -v sestatus &> /dev/null || ! sestatus | grep -q "SELinux status.*enabled"; then
        log_message "ERROR: SELinux is not enabled or available"
        exit 1
    fi
    
    # Check if data directory exists
    if [[ ! -d "$DATA_DIR" ]]; then
        log_message "WARNING: $DATA_DIR does not exist, skipping scan"
        exit 0
    fi
    
    local changes_made=0
    local allowed_count=0
    local blocked_count=0
    
    # Scan all directories in /shares
    for dir_path in "$DATA_DIR"/*; do
        # Skip if not a directory
        [[ ! -d "$dir_path" ]] && continue
        
        # Get just the directory name
        dir_name=$(basename "$dir_path")
        
        # Skip hidden directories
        [[ "$dir_name" == .* ]] && continue
        
        # Determine what context this directory should have
        if is_allowed "$dir_name"; then
            target_context="$ALLOWED_CONTEXT"
            status="ALLOWED"
            allowed_count=$((allowed_count + 1))
        else
            target_context="$BLOCKED_CONTEXT"
            status="BLOCKED"
            blocked_count=$((blocked_count + 1))
        fi
        
        # Get current SELinux context
        current_context=$(get_current_context "$dir_path")
        
        # Apply context if different or missing
        if [[ "$current_context" != "$target_context" ]]; then
            log_message "[$status] $dir_name: $current_context -> $target_context"
            
            if set_selinux_context "$dir_path" "$target_context"; then
                changes_made=$((changes_made + 1))
            fi
        else
            log_message "[$status] $dir_name: already has correct context ($current_context)"
        fi
    done
    
    log_message "Scan complete. Made $changes_made changes. ($allowed_count allowed, $blocked_count blocked)"
    
    # Show summary if changes were made or if verbose mode
    if [[ $changes_made -gt 0 ]] || [[ "${1:-}" == "verbose" ]]; then
        log_message "Current directory status:"
        for dir_path in "$DATA_DIR"/*; do
            [[ ! -d "$dir_path" ]] && continue
            dir_name=$(basename "$dir_path")
            [[ "$dir_name" == .* ]] && continue
            
            context=$(get_current_context "$dir_path")
            if is_allowed "$dir_name"; then
                log_message "  ‚úÖ $dir_name ($context)"
            else
                log_message "  üö´ $dir_name ($context)"
            fi
        done
    fi
}

# Function to show current status
show_status() {
    echo "SELinux Media Directory Scanner Status"
    echo "======================================"
    echo "Data Directory: $DATA_DIR"
    echo "Log File: $LOG_FILE"
    echo ""
    echo "Allowed Directories:"
    for dir in "${ALLOWED_DIRS[@]}"; do
        echo "  ‚úÖ $dir"
    done
    echo ""
    echo "Current Directory Contexts:"
    if [[ -d "$DATA_DIR" ]]; then
        for dir_path in "$DATA_DIR"/*; do
            [[ ! -d "$dir_path" ]] && continue
            dir_name=$(basename "$dir_path")
            [[ "$dir_name" == .* ]] && continue
            
            context=$(get_current_context "$dir_path")
            if is_allowed "$dir_name"; then
                echo "  ‚úÖ $dir_name: $context"
            else
                echo "  üö´ $dir_name: $context"
            fi
        done
    else
        echo "  $DATA_DIR does not exist"
    fi
}

# Function to test container access
test_access() {
    echo "Testing SELinux container access..."
    
    # Check if docker is available
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker not found. Cannot test container access."
        exit 1
    fi
    
    # Create a test script that tries to access directories
    cat > /tmp/selinux_test_access.sh << 'EOF'
#!/bin/bash
echo "Testing directory access from container:"
echo "========================================"
for dir in /shares/*/; do
    [[ ! -d "$dir" ]] && continue
    dir_name=$(basename "$dir")
    if timeout 5 ls "$dir" >/dev/null 2>&1; then
        echo "‚úÖ $dir_name: accessible"
    else
        echo "üö´ $dir_name: blocked"
    fi
done
EOF
    chmod +x /tmp/selinux_test_access.sh
    
    echo "Running test container with SELinux enforcement..."
    docker run --rm \
        --security-opt label=type:container_t \
        -v /shares:/shares:Z \
        -v /tmp/selinux_test_access.sh:/test_access.sh \
        ubuntu:latest /test_access.sh 2>&1 || echo "‚ùå Test failed"
    
    rm -f /tmp/selinux_test_access.sh
}

# Function to show help
show_help() {
    cat << EOF
SELinux Media Directory Scanner

Usage: $0 [COMMAND]

COMMANDS:
    scan        Scan and apply SELinux labels (default)
    status      Show current directory status
    test        Test container access to directories
    verbose     Scan with detailed output
    help        Show this help message

EXAMPLES:
    $0 scan          # Run normal scan
    $0 status        # Show current status
    $0 test          # Test Docker access
    $0 verbose       # Scan with full output

CONFIGURATION:
    Allowed directories: ${ALLOWED_DIRS[*]}
    Data directory: $DATA_DIR
    Log file: $LOG_FILE

EOF
}

# Main script logic
case "${1:-scan}" in
    scan)
        scan_and_label
        ;;
    status)
        show_status
        ;;
    test)
        test_access
        ;;
    verbose)
        scan_and_label verbose
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "Unknown command: $1"
        show_help
        exit 1
        ;;
esac